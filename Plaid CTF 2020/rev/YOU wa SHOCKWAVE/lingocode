
on zz_helper(x,y,z)
  if y > z then
    return([1, z - x])
  end if
  c = zz_helper(y, x + y, z)
  a = c.getAt(1)
  b = c.getAt(2)
  if b >= x then
    return([2 * a + 1, b - x])
  else
    return([2 * a + 0, b])
  end if
  exit
end

on zz(x)
  return(zz_helper(1, 1, x).getAt(1))
  exit
end

on check_flag(flag)
  if flag.length <> 42 then
    return(0)
  end if
  checksum = 0
  i = 1
  repeat while i <= 21
    checksum = bitXor(checksum, zz(charToNum(flag.getProp(#char, i * 2 - 1)) * 256 + charToNum(flag.getProp(#char, i * 2))))
    i = 1 + i
  end repeat
  if checksum <> 5803878 then
    return(0)
  end if
  check_data = [[2, 5, 12, 19, 3749774], [2, 9, 12, 17, 694990], [1, 3, 4, 13, 5764], [5, 7, 11, 12, 299886], [4, 5, 13, 14, 5713094], [0, 6, 8, 14, 430088], [7, 9, 10, 17, 3676754], [0, 11, 16, 17, 7288576], [5, 9, 10, 12, 5569582], [7, 12, 14, 20, 7883270], [0, 2, 6, 18, 5277110], [3, 8, 12, 14, 437608], [4, 7, 12, 16, 3184334], [3, 12, 13, 20, 2821934], [3, 5, 14, 16, 5306888], [4, 13, 16, 18, 5634450], [11, 14, 17, 18, 6221894], [1, 4, 9, 18, 5290664], [2, 9, 13, 15, 6404568], [2, 5, 9, 12, 3390622]]
  repeat while check_data <= 1
    x = getAt(1, count(check_data))
    i = x.getAt(1)
    j = x.getAt(2)
    k = x.getAt(3)
    l = x.getAt(4)
    target = x.getAt(5)
    sum = zz(charToNum(flag.getProp(#char, i * 2 + 1)) * 256 + charToNum(flag.getProp(#char, i * 2 + 2)))
    sum = bitXor(sum, zz(charToNum(flag.getProp(#char, j * 2 + 1)) * 256 + charToNum(flag.getProp(#char, j * 2 + 2))))
    sum = bitXor(sum, zz(charToNum(flag.getProp(#char, k * 2 + 1)) * 256 + charToNum(flag.getProp(#char, k * 2 + 2))))
    sum = bitXor(sum, zz(charToNum(flag.getProp(#char, l * 2 + 1)) * 256 + charToNum(flag.getProp(#char, l * 2 + 2))))
    if sum <> target then
      return(0)
    end if
  end repeat
  return(1)
  exit
end


on click()
  flag = sprite("flag_input").text
  if check_flag(flag) then
    sprite("flag_input").text = "Good flag!"
    go(61)
  else
    sprite("flag_input").text = "Bad flag!"
    go(31)
  end if
  exit
end
